// Code generated by gowrap. DO NOT EDIT.
// template: ../../../templates/logrus
// gowrap: http://github.com/hexdigest/gowrap

package generated

import (
	"context"
	_sourceExternal "goWrapExample/internal/external"

	"github.com/sirupsen/logrus"
)

// TodoListWithLogrus implements _sourceExternal.TodoList that is instrumented with logrus logger
type TodoListWithLogrus struct {
	_log  *logrus.Entry
	_base _sourceExternal.TodoList
}

// NewTodoListWithLogrus instruments an implementation of the _sourceExternal.TodoList with simple logging
func NewTodoListWithLogrus(base _sourceExternal.TodoList, log *logrus.Entry) TodoListWithLogrus {
	return TodoListWithLogrus{
		_base: base,
		_log:  log,
	}
}

// Add implements _sourceExternal.TodoList
func (_d TodoListWithLogrus) Add(ctx context.Context, text string) (s1 string, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx":  ctx,
		"text": text})).Debug("TodoListWithLogrus: calling Add")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"s1":  s1,
				"err": err})).Error("TodoListWithLogrus: method Add returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"s1":  s1,
				"err": err})).Debug("TodoListWithLogrus: method Add finished")
		}
	}()
	return _d._base.Add(ctx, text)
}

// List implements _sourceExternal.TodoList
func (_d TodoListWithLogrus) List(ctx context.Context) (sa1 []string, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx})).Debug("TodoListWithLogrus: calling List")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"sa1": sa1,
				"err": err})).Error("TodoListWithLogrus: method List returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"sa1": sa1,
				"err": err})).Debug("TodoListWithLogrus: method List finished")
		}
	}()
	return _d._base.List(ctx)
}

// Remove implements _sourceExternal.TodoList
func (_d TodoListWithLogrus) Remove(ctx context.Context, id string) (s1 string, err error) {
	_d._log.WithFields(logrus.Fields(map[string]interface{}{
		"ctx": ctx,
		"id":  id})).Debug("TodoListWithLogrus: calling Remove")
	defer func() {
		if err != nil {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"s1":  s1,
				"err": err})).Error("TodoListWithLogrus: method Remove returned an error")
		} else {
			_d._log.WithFields(logrus.Fields(map[string]interface{}{
				"s1":  s1,
				"err": err})).Debug("TodoListWithLogrus: method Remove finished")
		}
	}()
	return _d._base.Remove(ctx, id)
}
