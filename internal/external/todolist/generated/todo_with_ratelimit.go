// Code generated by gowrap. DO NOT EDIT.
// template: ../../../templates/ratelimit
// gowrap: http://github.com/hexdigest/gowrap

package generated

import (
	"context"
	_sourceExternal "goWrapExample/internal/external"
	"time"
)

// TodoListWithRateLimit implements _sourceExternal.TodoList
type TodoListWithRateLimit struct {
	_base  _sourceExternal.TodoList
	_ticks chan time.Time
}

// NewTodoListWithRateLimit instruments an implementation of the _sourceExternal.TodoList with rate limiting
func NewTodoListWithRateLimit(base _sourceExternal.TodoList, burst int, rps float64) *TodoListWithRateLimit {
	d := &TodoListWithRateLimit{
		_base:  base,
		_ticks: make(chan time.Time, burst),
	}

	now := time.Now()
	for i := 0; i < burst; i++ {
		d._ticks <- now
	}

	delay := time.Duration(float64(time.Second) / rps)

	go func() {
		for t := range time.Tick(delay) {
			d._ticks <- t
		}
	}()

	return d
}

// Add implements _sourceExternal.TodoList
func (_d *TodoListWithRateLimit) Add(ctx context.Context, text string) (s1 string, err error) {
	select {
	case <-ctx.Done():
		err = ctx.Err()
		return
	case <-_d._ticks:
	}

	return _d._base.Add(ctx, text)
}

// List implements _sourceExternal.TodoList
func (_d *TodoListWithRateLimit) List(ctx context.Context) (sa1 []string, err error) {
	select {
	case <-ctx.Done():
		err = ctx.Err()
		return
	case <-_d._ticks:
	}

	return _d._base.List(ctx)
}

// Remove implements _sourceExternal.TodoList
func (_d *TodoListWithRateLimit) Remove(ctx context.Context, id string) (s1 string, err error) {
	select {
	case <-ctx.Done():
		err = ctx.Err()
		return
	case <-_d._ticks:
	}

	return _d._base.Remove(ctx, id)
}
